#include <dt-bindings/zmk/mouse.h>
#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
    chosen { zmk,matrix_transform = &five_column_transform; };

    behaviors {
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_lt {
            bindings = <&kp LESS_THAN>;
            key-positions = <3 1>;
            layers = <1>;
        };

        combo_gt {
            bindings = <&kp GREATER_THAN>;
            key-positions = <3 2>;
            layers = <1>;
        };

        combo_and {
            bindings = <&kp AMPERSAND>;
            key-positions = <12 13>;
            layers = <1>;
        };

        combo_or {
            bindings = <&kp PIPE>;
            key-positions = <13 11>;
            layers = <1>;
        };

        combo_exc {
            bindings = <&kp EXCLAMATION>;
            key-positions = <23 24>;
            layers = <1>;
        };

        combo_colon {
            bindings = <&kp COLON>;
            key-positions = <16 17>;
            layers = <1>;
        };

        combo_end {
            bindings = <&kp END>;
            key-positions = <6 8>;
            layers = <1>;
        };

        combo_quote {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <26 27>;
            layers = <0>;
        };

        combo_under {
            bindings = <&kp UNDERSCORE>;
            key-positions = <13 14>;
            layers = <1>;
        };

        combo_copy {
            bindings = <&kp LG(C)>;
            key-positions = <2 3>;
            layers = <3>;
        };

        combo_cut {
            bindings = <&kp LG(X)>;
            key-positions = <12 13>;
            layers = <3>;
        };

        combo_paste {
            bindings = <&kp LG(V)>;
            key-positions = <11 13>;
            layers = <3>;
        };

        combo_enter {
            bindings = <&kp ENTER>;
            key-positions = <26 28>;
            layers = <1>;
        };

        combo_undo {
            bindings = <&kp LG(Z)>;
            key-positions = <23 21>;
            layers = <3>;
        };

        combo_space {
            bindings = <&kp SPACE>;
            key-positions = <16 18>;
            layers = <1>;
        };

        combo_cut_line {
            bindings = <&macro_cut_line>;
            key-positions = <23 22>;
            layers = <3>;
        };

        combo_rbrace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <23 22>;
            layers = <1>;
        };

        combo_lbrace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <21 23>;
            layers = <1>;
        };

        combo_save {
            bindings = <&kp LG(S)>;
            key-positions = <3 1>;
            layers = <3>;
        };

        combo_left {
            bindings = <&kp LEFT>;
            key-positions = <6 7>;
            layers = <1>;
        };

        combo_tab {
            bindings = <&kp TAB>;
            key-positions = <26 27>;
            layers = <1>;
        };
    };

    macros {
        macro_cut_line: macro_select_line {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp END &kp LS(HOME) &kp LS(HOME) &kp LG(X) &kp BACKSPACE &kp DOWN &kp HOME &kp HOME>;
            label = "MACRO_SELECT_LINE";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            bindings = <
  &ht LS(Q) Q  &ht LS(W) W  &ht LS(E) E  &ht LS(R) R      &ht LS(T) T    &ht LS(Y) Y  &ht LS(U) U  &ht LS(I) I                     &ht LS(O) O      &ht LS(P) P
  &ht LS(A) A  &ht LS(S) S  &ht LS(D) D  &ht LS(F) F      &ht LS(G) G    &ht LS(H) H  &ht LS(J) J  &ht LS(K) K                     &ht LS(L) L      &kp RCTRL
  &ht LS(Z) Z  &ht LS(X) X  &ht LS(C) C  &ht LS(V) V      &ht LS(B) B    &ht LS(N) N  &ht LS(M) M  &ht DOUBLE_QUOTES SINGLE_QUOTE  &ht CARET TILDE  &ht RSHFT GRAVE
                            &lt 4 ESC    &lt 3 BACKSPACE  &kp LGUI       &lt 2 ENTER  &lt 1 SPACE
            >;
        };

        NumSym {
            bindings = <
  &kp ESC       &ht DOLLAR PERCENT       &ht LESS_THAN LEFT_PARENTHESIS  &ht GREATER_THAN RIGHT_PARENTHESIS  &kp EQUAL                   &kp KP_N2  &kp KP_NUMBER_0   &kp KP_N1            &kp KP_N3  &kp RALT
  &kp CAPSLOCK  &ht BACKSLASH KP_DIVIDE  &ht AMPERSAND ASTERISK          &ht UNDERSCORE MINUS                &ht PIPE PLUS               &kp KP_N4  &ht COLON PERIOD  &ht SEMICOLON COMMA  &kp KP_N5  &kp RCTRL
  &kp TAB       &ht HASH AT_SIGN         &ht LEFT_BRACE LEFT_BRACKET     &ht RIGHT_BRACE RIGHT_BRACKET       &ht EXCLAMATION QUESTION    &kp KP_N6  &kp KP_N8         &kp KP_N9            &kp KP_N7  &kp RSHFT
                                         &trans                          &trans                              &trans                      &trans     &trans
            >;
        };

        Navigation {
            bindings = <
  &kp ESC   &trans                 &kp RG(RS(RA(RC(B))))  &kp RS(RA(RC(RG(Y))))  &trans                   &kp PG_UP                                  &ht LS(HOME) HOME          &ht LS(UP_ARROW) UP_ARROW                    &ht LS(END) END              &kp RIGHT_ALT
  &kp CAPS  &kp RS(RA(RC(RG(A))))  &kp RG(RS(RA(RC(T))))  &kp RG(RS(RA(RC(V))))  &kp RS(RA(RC(RG(F))))    &kp PAGE_DOWN                              &ht LS(LEFT) LEFT          &ht LS(DOWN) DOWN                            &ht LS(RIGHT) RIGHT          &kp RCTRL
  &kp TAB   &kp RS(RA(RC(RG(X))))  &kp RG(RS(RA(RC(S))))  &kp RG(RS(RA(RC(C))))  &kp RS(RA(RC(RG(M))))    &ht LG(LS(LEFT_BRACKET)) LG(LEFT_BRACKET)  &ht RS(LA(LEFT)) LA(LEFT)  &ht LS(LG(RIGHT_BRACKET)) LG(RIGHT_BRACKET)  &ht RS(LA(RIGHT)) LA(RIGHT)  &kp RSHFT
                                   &trans                 &trans                 &trans                   &trans                                     &trans
            >;
        };

        Function {
            bindings = <
  &kp ESC       &mo 5          &mo 6       &mkp LCLK          &mkp RCLK          &kp F2  &kp F10  &kp F1   &kp F3  &kp RALT
  &kp LEFT_GUI  &trans         &kp K_MUTE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP    &kp F4  &kp F12  &kp F11  &kp F5  &kp RCTRL
  &kp TAB       &kp LC(LG(Q))  &kp C_PREV  &kp C_NEXT         &kp C_PLAY         &kp F6  &kp F8   &kp F9   &kp F7  &kp RSHFT
                               &trans      &trans             &trans             &trans  &trans
            >;
        };

        VSCode {
            bindings = <
  &kp ESC   &kp F2  &kp LS(F12)    &kp F12       &kp LS(LG(BACKSLASH))    &trans                       &kp LG(LEFT_BRACKET)             &ht LS(LA(UP_ARROW)) LA(UP_ARROW)  &kp LG(RIGHT_BRACKET)        &kp RALT
  &kp CAPS  &trans  &kp LA(LS(F))  &kp LG(FSLH)  &kp LA(LS(A))            &kp LC(G)                    &ht LA(LS(LEFT_ARROW)) LA(LEFT)  &ht LS(LA(DOWN_ARROW)) LA(DOWN)    &ht LA(LS(RIGHT)) LA(RIGHT)  &kp RCTRL
  &kp TAB   &trans  &trans         &trans        &kp LS(LG(P))            &trans                       &trans                           &kp LG(D)                          &trans                       &kp RSHFT
                    &trans         &trans        &trans                   &ht LS(LG(ENTER)) LG(ENTER)  &trans
            >;
        };

        Scroll {
            label = "Scroll";
            bindings = <
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                  &trans  &trans  &trans    &trans  &trans
            >;
        };

        Sniper {
            label = "Sniper";
            bindings = <
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                  &trans  &trans  &trans    &trans  &trans
            >;
        };
    };
};
